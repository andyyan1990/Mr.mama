// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: svg.proto

#include "svg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class ProtoPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtoPoint>
      _instance;
} _ProtoPoint_default_instance_;
class ProtoCurveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtoCurve>
      _instance;
} _ProtoCurve_default_instance_;
class ProtoRectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtoRect>
      _instance;
} _ProtoRect_default_instance_;
class ProtoColorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtoColor>
      _instance;
} _ProtoColor_default_instance_;
class ProtoAffineTransformMatrixDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtoAffineTransformMatrix>
      _instance;
} _ProtoAffineTransformMatrix_default_instance_;
class ProtoSVGElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtoSVGElement>
      _instance;
} _ProtoSVGElement_default_instance_;
class ProtoSVGPaintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtoSVGPaint>
      _instance;
} _ProtoSVGPaint_default_instance_;
class ProtoSVGGeneralParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtoSVGGeneralParams>
      _instance;
} _ProtoSVGGeneralParams_default_instance_;
class ProtoSVGElementGradient_GradientStopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtoSVGElementGradient_GradientStop>
      _instance;
} _ProtoSVGElementGradient_GradientStop_default_instance_;
class ProtoSVGElementGradientDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtoSVGElementGradient>
      _instance;
} _ProtoSVGElementGradient_default_instance_;
class ProtoSVGElementPath_PathPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtoSVGElementPath_PathPoint>
      _instance;
} _ProtoSVGElementPath_PathPoint_default_instance_;
class ProtoSVGElementPathDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtoSVGElementPath>
      _instance;
} _ProtoSVGElementPath_default_instance_;
class ProtoSVGRootDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtoSVGRoot>
      _instance;
} _ProtoSVGRoot_default_instance_;
namespace protobuf_svg_2eproto {
void InitDefaultsProtoPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_ProtoPoint_default_instance_;
    new (ptr) ::ProtoPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoPoint::InitAsDefaultInstance();
}

void InitDefaultsProtoPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProtoPointImpl);
}

void InitDefaultsProtoCurveImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_ProtoCurve_default_instance_;
    new (ptr) ::ProtoCurve();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoCurve::InitAsDefaultInstance();
}

void InitDefaultsProtoCurve() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProtoCurveImpl);
}

void InitDefaultsProtoRectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_ProtoRect_default_instance_;
    new (ptr) ::ProtoRect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoRect::InitAsDefaultInstance();
}

void InitDefaultsProtoRect() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProtoRectImpl);
}

void InitDefaultsProtoColorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_ProtoColor_default_instance_;
    new (ptr) ::ProtoColor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoColor::InitAsDefaultInstance();
}

void InitDefaultsProtoColor() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProtoColorImpl);
}

void InitDefaultsProtoAffineTransformMatrixImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_ProtoAffineTransformMatrix_default_instance_;
    new (ptr) ::ProtoAffineTransformMatrix();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoAffineTransformMatrix::InitAsDefaultInstance();
}

void InitDefaultsProtoAffineTransformMatrix() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProtoAffineTransformMatrixImpl);
}

void InitDefaultsProtoSVGElementImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_svg_2eproto::InitDefaultsProtoSVGElementGradient_GradientStop();
  protobuf_svg_2eproto::InitDefaultsProtoAffineTransformMatrix();
  protobuf_svg_2eproto::InitDefaultsProtoPoint();
  protobuf_svg_2eproto::InitDefaultsProtoSVGElementPath_PathPoint();
  protobuf_svg_2eproto::InitDefaultsProtoRect();
  protobuf_svg_2eproto::InitDefaultsProtoSVGPaint();
  {
    void* ptr = &::_ProtoSVGElement_default_instance_;
    new (ptr) ::ProtoSVGElement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_ProtoSVGGeneralParams_default_instance_;
    new (ptr) ::ProtoSVGGeneralParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_ProtoSVGElementGradient_default_instance_;
    new (ptr) ::ProtoSVGElementGradient();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_ProtoSVGElementPath_default_instance_;
    new (ptr) ::ProtoSVGElementPath();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoSVGElement::InitAsDefaultInstance();
  ::ProtoSVGGeneralParams::InitAsDefaultInstance();
  ::ProtoSVGElementGradient::InitAsDefaultInstance();
  ::ProtoSVGElementPath::InitAsDefaultInstance();
}

void InitDefaultsProtoSVGElement() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProtoSVGElementImpl);
}

void InitDefaultsProtoSVGPaintImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_svg_2eproto::InitDefaultsProtoColor();
  {
    void* ptr = &::_ProtoSVGPaint_default_instance_;
    new (ptr) ::ProtoSVGPaint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoSVGPaint::InitAsDefaultInstance();
}

void InitDefaultsProtoSVGPaint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProtoSVGPaintImpl);
}

void InitDefaultsProtoSVGElementGradient_GradientStopImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_svg_2eproto::InitDefaultsProtoColor();
  {
    void* ptr = &::_ProtoSVGElementGradient_GradientStop_default_instance_;
    new (ptr) ::ProtoSVGElementGradient_GradientStop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoSVGElementGradient_GradientStop::InitAsDefaultInstance();
}

void InitDefaultsProtoSVGElementGradient_GradientStop() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProtoSVGElementGradient_GradientStopImpl);
}

void InitDefaultsProtoSVGElementPath_PathPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_svg_2eproto::InitDefaultsProtoPoint();
  protobuf_svg_2eproto::InitDefaultsProtoCurve();
  {
    void* ptr = &::_ProtoSVGElementPath_PathPoint_default_instance_;
    new (ptr) ::ProtoSVGElementPath_PathPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoSVGElementPath_PathPoint::InitAsDefaultInstance();
}

void InitDefaultsProtoSVGElementPath_PathPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProtoSVGElementPath_PathPointImpl);
}

void InitDefaultsProtoSVGRootImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_svg_2eproto::InitDefaultsProtoSVGElement();
  protobuf_svg_2eproto::InitDefaultsProtoRect();
  {
    void* ptr = &::_ProtoSVGRoot_default_instance_;
    new (ptr) ::ProtoSVGRoot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoSVGRoot::InitAsDefaultInstance();
}

void InitDefaultsProtoSVGRoot() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProtoSVGRootImpl);
}

}  // namespace protobuf_svg_2eproto

// ===================================================================

void ProtoPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoPoint::kXFieldNumber;
const int ProtoPoint::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoPoint::ProtoPoint()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_svg_2eproto::InitDefaultsProtoPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPoint)
}
ProtoPoint::ProtoPoint(const ProtoPoint& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ProtoPoint)
}

void ProtoPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

ProtoPoint::~ProtoPoint() {
  // @@protoc_insertion_point(destructor:ProtoPoint)
  SharedDtor();
}

void ProtoPoint::SharedDtor() {
}

void ProtoPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoPoint& ProtoPoint::default_instance() {
  ::protobuf_svg_2eproto::InitDefaultsProtoPoint();
  return *internal_default_instance();
}

ProtoPoint* ProtoPoint::New(::google::protobuf::Arena* arena) const {
  ProtoPoint* n = new ProtoPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ProtoPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPoint)
  return false;
#undef DO_
}

void ProtoPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ProtoPoint)
}

size_t ProtoPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoPoint)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoPoint*>(&from));
}

void ProtoPoint::MergeFrom(const ProtoPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoPoint::CopyFrom(const ProtoPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPoint::IsInitialized() const {
  return true;
}

void ProtoPoint::Swap(ProtoPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoPoint::InternalSwap(ProtoPoint* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ProtoPoint::GetTypeName() const {
  return "ProtoPoint";
}


// ===================================================================

void ProtoCurve::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoCurve::kCp1XFieldNumber;
const int ProtoCurve::kCp1YFieldNumber;
const int ProtoCurve::kCp2XFieldNumber;
const int ProtoCurve::kCp2YFieldNumber;
const int ProtoCurve::kXFieldNumber;
const int ProtoCurve::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoCurve::ProtoCurve()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_svg_2eproto::InitDefaultsProtoCurve();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCurve)
}
ProtoCurve::ProtoCurve(const ProtoCurve& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cp1x_, &from.cp1x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&cp1x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ProtoCurve)
}

void ProtoCurve::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cp1x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&cp1x_)) + sizeof(y_));
}

ProtoCurve::~ProtoCurve() {
  // @@protoc_insertion_point(destructor:ProtoCurve)
  SharedDtor();
}

void ProtoCurve::SharedDtor() {
}

void ProtoCurve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoCurve& ProtoCurve::default_instance() {
  ::protobuf_svg_2eproto::InitDefaultsProtoCurve();
  return *internal_default_instance();
}

ProtoCurve* ProtoCurve::New(::google::protobuf::Arena* arena) const {
  ProtoCurve* n = new ProtoCurve;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoCurve::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoCurve)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&cp1x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&cp1x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoCurve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ProtoCurve)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float cp1x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_cp1x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cp1x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cp1y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_cp1y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cp1y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cp2x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_cp2x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cp2x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cp2y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_cp2y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cp2y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCurve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCurve)
  return false;
#undef DO_
}

void ProtoCurve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCurve)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float cp1x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->cp1x(), output);
  }

  // optional float cp1y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->cp1y(), output);
  }

  // optional float cp2x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cp2x(), output);
  }

  // optional float cp2y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cp2y(), output);
  }

  // optional float x = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->x(), output);
  }

  // optional float y = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->y(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ProtoCurve)
}

size_t ProtoCurve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoCurve)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional float cp1x = 1;
    if (has_cp1x()) {
      total_size += 1 + 4;
    }

    // optional float cp1y = 2;
    if (has_cp1y()) {
      total_size += 1 + 4;
    }

    // optional float cp2x = 3;
    if (has_cp2x()) {
      total_size += 1 + 4;
    }

    // optional float cp2y = 4;
    if (has_cp2y()) {
      total_size += 1 + 4;
    }

    // optional float x = 5;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 6;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoCurve::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoCurve*>(&from));
}

void ProtoCurve::MergeFrom(const ProtoCurve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoCurve)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      cp1x_ = from.cp1x_;
    }
    if (cached_has_bits & 0x00000002u) {
      cp1y_ = from.cp1y_;
    }
    if (cached_has_bits & 0x00000004u) {
      cp2x_ = from.cp2x_;
    }
    if (cached_has_bits & 0x00000008u) {
      cp2y_ = from.cp2y_;
    }
    if (cached_has_bits & 0x00000010u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000020u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoCurve::CopyFrom(const ProtoCurve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoCurve::IsInitialized() const {
  return true;
}

void ProtoCurve::Swap(ProtoCurve* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoCurve::InternalSwap(ProtoCurve* other) {
  using std::swap;
  swap(cp1x_, other->cp1x_);
  swap(cp1y_, other->cp1y_);
  swap(cp2x_, other->cp2x_);
  swap(cp2y_, other->cp2y_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ProtoCurve::GetTypeName() const {
  return "ProtoCurve";
}


// ===================================================================

void ProtoRect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoRect::kXFieldNumber;
const int ProtoRect::kYFieldNumber;
const int ProtoRect::kWFieldNumber;
const int ProtoRect::kHFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoRect::ProtoRect()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_svg_2eproto::InitDefaultsProtoRect();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRect)
}
ProtoRect::ProtoRect(const ProtoRect& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&x_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:ProtoRect)
}

void ProtoRect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&x_)) + sizeof(h_));
}

ProtoRect::~ProtoRect() {
  // @@protoc_insertion_point(destructor:ProtoRect)
  SharedDtor();
}

void ProtoRect::SharedDtor() {
}

void ProtoRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoRect& ProtoRect::default_instance() {
  ::protobuf_svg_2eproto::InitDefaultsProtoRect();
  return *internal_default_instance();
}

ProtoRect* ProtoRect::New(::google::protobuf::Arena* arena) const {
  ProtoRect* n = new ProtoRect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoRect::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoRect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&h_) -
        reinterpret_cast<char*>(&x_)) + sizeof(h_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ProtoRect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float w = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float h = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_h();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRect)
  return false;
#undef DO_
}

void ProtoRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float w = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->w(), output);
  }

  // optional float h = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->h(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ProtoRect)
}

size_t ProtoRect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoRect)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float w = 3;
    if (has_w()) {
      total_size += 1 + 4;
    }

    // optional float h = 4;
    if (has_h()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoRect*>(&from));
}

void ProtoRect::MergeFrom(const ProtoRect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoRect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00000008u) {
      h_ = from.h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoRect::CopyFrom(const ProtoRect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRect::IsInitialized() const {
  return true;
}

void ProtoRect::Swap(ProtoRect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoRect::InternalSwap(ProtoRect* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(w_, other->w_);
  swap(h_, other->h_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ProtoRect::GetTypeName() const {
  return "ProtoRect";
}


// ===================================================================

void ProtoColor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoColor::kRFieldNumber;
const int ProtoColor::kGFieldNumber;
const int ProtoColor::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoColor::ProtoColor()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_svg_2eproto::InitDefaultsProtoColor();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoColor)
}
ProtoColor::ProtoColor(const ProtoColor& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:ProtoColor)
}

void ProtoColor::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&r_)) + sizeof(b_));
}

ProtoColor::~ProtoColor() {
  // @@protoc_insertion_point(destructor:ProtoColor)
  SharedDtor();
}

void ProtoColor::SharedDtor() {
}

void ProtoColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoColor& ProtoColor::default_instance() {
  ::protobuf_svg_2eproto::InitDefaultsProtoColor();
  return *internal_default_instance();
}

ProtoColor* ProtoColor::New(::google::protobuf::Arena* arena) const {
  ProtoColor* n = new ProtoColor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoColor::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_) -
        reinterpret_cast<char*>(&r_)) + sizeof(b_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ProtoColor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 r = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 g = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_g();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoColor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoColor)
  return false;
#undef DO_
}

void ProtoColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 r = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->r(), output);
  }

  // optional int32 g = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->g(), output);
  }

  // optional int32 b = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->b(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ProtoColor)
}

size_t ProtoColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoColor)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 r = 1;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r());
    }

    // optional int32 g = 2;
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g());
    }

    // optional int32 b = 3;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoColor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoColor*>(&from));
}

void ProtoColor::MergeFrom(const ProtoColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000002u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoColor::CopyFrom(const ProtoColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoColor::IsInitialized() const {
  return true;
}

void ProtoColor::Swap(ProtoColor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoColor::InternalSwap(ProtoColor* other) {
  using std::swap;
  swap(r_, other->r_);
  swap(g_, other->g_);
  swap(b_, other->b_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ProtoColor::GetTypeName() const {
  return "ProtoColor";
}


// ===================================================================

void ProtoAffineTransformMatrix::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoAffineTransformMatrix::kAFieldNumber;
const int ProtoAffineTransformMatrix::kBFieldNumber;
const int ProtoAffineTransformMatrix::kCFieldNumber;
const int ProtoAffineTransformMatrix::kDFieldNumber;
const int ProtoAffineTransformMatrix::kTxFieldNumber;
const int ProtoAffineTransformMatrix::kTyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoAffineTransformMatrix::ProtoAffineTransformMatrix()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_svg_2eproto::InitDefaultsProtoAffineTransformMatrix();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAffineTransformMatrix)
}
ProtoAffineTransformMatrix::ProtoAffineTransformMatrix(const ProtoAffineTransformMatrix& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&ty_) -
    reinterpret_cast<char*>(&a_)) + sizeof(ty_));
  // @@protoc_insertion_point(copy_constructor:ProtoAffineTransformMatrix)
}

void ProtoAffineTransformMatrix::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ty_) -
      reinterpret_cast<char*>(&a_)) + sizeof(ty_));
}

ProtoAffineTransformMatrix::~ProtoAffineTransformMatrix() {
  // @@protoc_insertion_point(destructor:ProtoAffineTransformMatrix)
  SharedDtor();
}

void ProtoAffineTransformMatrix::SharedDtor() {
}

void ProtoAffineTransformMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoAffineTransformMatrix& ProtoAffineTransformMatrix::default_instance() {
  ::protobuf_svg_2eproto::InitDefaultsProtoAffineTransformMatrix();
  return *internal_default_instance();
}

ProtoAffineTransformMatrix* ProtoAffineTransformMatrix::New(::google::protobuf::Arena* arena) const {
  ProtoAffineTransformMatrix* n = new ProtoAffineTransformMatrix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoAffineTransformMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoAffineTransformMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ty_) -
        reinterpret_cast<char*>(&a_)) + sizeof(ty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoAffineTransformMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ProtoAffineTransformMatrix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float a = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float b = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float c = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_c();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float d = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tx = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_tx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ty = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_ty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAffineTransformMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAffineTransformMatrix)
  return false;
#undef DO_
}

void ProtoAffineTransformMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAffineTransformMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float a = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->a(), output);
  }

  // optional float b = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->b(), output);
  }

  // optional float c = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->c(), output);
  }

  // optional float d = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->d(), output);
  }

  // optional float tx = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->tx(), output);
  }

  // optional float ty = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->ty(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ProtoAffineTransformMatrix)
}

size_t ProtoAffineTransformMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoAffineTransformMatrix)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional float a = 1;
    if (has_a()) {
      total_size += 1 + 4;
    }

    // optional float b = 2;
    if (has_b()) {
      total_size += 1 + 4;
    }

    // optional float c = 3;
    if (has_c()) {
      total_size += 1 + 4;
    }

    // optional float d = 4;
    if (has_d()) {
      total_size += 1 + 4;
    }

    // optional float tx = 5;
    if (has_tx()) {
      total_size += 1 + 4;
    }

    // optional float ty = 6;
    if (has_ty()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoAffineTransformMatrix::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoAffineTransformMatrix*>(&from));
}

void ProtoAffineTransformMatrix::MergeFrom(const ProtoAffineTransformMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoAffineTransformMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000002u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000004u) {
      c_ = from.c_;
    }
    if (cached_has_bits & 0x00000008u) {
      d_ = from.d_;
    }
    if (cached_has_bits & 0x00000010u) {
      tx_ = from.tx_;
    }
    if (cached_has_bits & 0x00000020u) {
      ty_ = from.ty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoAffineTransformMatrix::CopyFrom(const ProtoAffineTransformMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoAffineTransformMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoAffineTransformMatrix::IsInitialized() const {
  return true;
}

void ProtoAffineTransformMatrix::Swap(ProtoAffineTransformMatrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoAffineTransformMatrix::InternalSwap(ProtoAffineTransformMatrix* other) {
  using std::swap;
  swap(a_, other->a_);
  swap(b_, other->b_);
  swap(c_, other->c_);
  swap(d_, other->d_);
  swap(tx_, other->tx_);
  swap(ty_, other->ty_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ProtoAffineTransformMatrix::GetTypeName() const {
  return "ProtoAffineTransformMatrix";
}


// ===================================================================

void ProtoSVGElement::InitAsDefaultInstance() {
  ::_ProtoSVGElement_default_instance_._instance.get_mutable()->group_ = const_cast< ::ProtoSVGGeneralParams*>(
      ::ProtoSVGGeneralParams::internal_default_instance());
  ::_ProtoSVGElement_default_instance_._instance.get_mutable()->path_ = const_cast< ::ProtoSVGElementPath*>(
      ::ProtoSVGElementPath::internal_default_instance());
  ::_ProtoSVGElement_default_instance_._instance.get_mutable()->gradient_ = const_cast< ::ProtoSVGElementGradient*>(
      ::ProtoSVGElementGradient::internal_default_instance());
  ::_ProtoSVGElement_default_instance_._instance.get_mutable()->defs_ = const_cast< ::ProtoSVGGeneralParams*>(
      ::ProtoSVGGeneralParams::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoSVGElement::kGroupFieldNumber;
const int ProtoSVGElement::kPathFieldNumber;
const int ProtoSVGElement::kGradientFieldNumber;
const int ProtoSVGElement::kDefsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoSVGElement::ProtoSVGElement()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_svg_2eproto::InitDefaultsProtoSVGElement();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoSVGElement)
}
ProtoSVGElement::ProtoSVGElement(const ProtoSVGElement& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_group()) {
    group_ = new ::ProtoSVGGeneralParams(*from.group_);
  } else {
    group_ = NULL;
  }
  if (from.has_path()) {
    path_ = new ::ProtoSVGElementPath(*from.path_);
  } else {
    path_ = NULL;
  }
  if (from.has_gradient()) {
    gradient_ = new ::ProtoSVGElementGradient(*from.gradient_);
  } else {
    gradient_ = NULL;
  }
  if (from.has_defs()) {
    defs_ = new ::ProtoSVGGeneralParams(*from.defs_);
  } else {
    defs_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ProtoSVGElement)
}

void ProtoSVGElement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&defs_) -
      reinterpret_cast<char*>(&group_)) + sizeof(defs_));
}

ProtoSVGElement::~ProtoSVGElement() {
  // @@protoc_insertion_point(destructor:ProtoSVGElement)
  SharedDtor();
}

void ProtoSVGElement::SharedDtor() {
  if (this != internal_default_instance()) delete group_;
  if (this != internal_default_instance()) delete path_;
  if (this != internal_default_instance()) delete gradient_;
  if (this != internal_default_instance()) delete defs_;
}

void ProtoSVGElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoSVGElement& ProtoSVGElement::default_instance() {
  ::protobuf_svg_2eproto::InitDefaultsProtoSVGElement();
  return *internal_default_instance();
}

ProtoSVGElement* ProtoSVGElement::New(::google::protobuf::Arena* arena) const {
  ProtoSVGElement* n = new ProtoSVGElement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoSVGElement::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoSVGElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(group_ != NULL);
      group_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(path_ != NULL);
      path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(gradient_ != NULL);
      gradient_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(defs_ != NULL);
      defs_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoSVGElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ProtoSVGElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoSVGGeneralParams group = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoSVGElementPath path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoSVGElementGradient gradient = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gradient()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoSVGGeneralParams defs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_defs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoSVGElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoSVGElement)
  return false;
#undef DO_
}

void ProtoSVGElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoSVGElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ProtoSVGGeneralParams group = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->group_, output);
  }

  // optional .ProtoSVGElementPath path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->path_, output);
  }

  // optional .ProtoSVGElementGradient gradient = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->gradient_, output);
  }

  // optional .ProtoSVGGeneralParams defs = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->defs_, output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ProtoSVGElement)
}

size_t ProtoSVGElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoSVGElement)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional .ProtoSVGGeneralParams group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->group_);
    }

    // optional .ProtoSVGElementPath path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->path_);
    }

    // optional .ProtoSVGElementGradient gradient = 3;
    if (has_gradient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->gradient_);
    }

    // optional .ProtoSVGGeneralParams defs = 4;
    if (has_defs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->defs_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSVGElement::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoSVGElement*>(&from));
}

void ProtoSVGElement::MergeFrom(const ProtoSVGElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoSVGElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_group()->::ProtoSVGGeneralParams::MergeFrom(from.group());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_path()->::ProtoSVGElementPath::MergeFrom(from.path());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_gradient()->::ProtoSVGElementGradient::MergeFrom(from.gradient());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_defs()->::ProtoSVGGeneralParams::MergeFrom(from.defs());
    }
  }
}

void ProtoSVGElement::CopyFrom(const ProtoSVGElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoSVGElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSVGElement::IsInitialized() const {
  return true;
}

void ProtoSVGElement::Swap(ProtoSVGElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoSVGElement::InternalSwap(ProtoSVGElement* other) {
  using std::swap;
  swap(group_, other->group_);
  swap(path_, other->path_);
  swap(gradient_, other->gradient_);
  swap(defs_, other->defs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ProtoSVGElement::GetTypeName() const {
  return "ProtoSVGElement";
}


// ===================================================================

void ProtoSVGPaint::InitAsDefaultInstance() {
  ::_ProtoSVGPaint_default_instance_._instance.get_mutable()->color_ = const_cast< ::ProtoColor*>(
      ::ProtoColor::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoSVGPaint::kColorFieldNumber;
const int ProtoSVGPaint::kRefIdFieldNumber;
const int ProtoSVGPaint::kPaintOffFieldNumber;
const int ProtoSVGPaint::kOddFieldNumber;
const int ProtoSVGPaint::kStrokeWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoSVGPaint::ProtoSVGPaint()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_svg_2eproto::InitDefaultsProtoSVGPaint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoSVGPaint)
}
ProtoSVGPaint::ProtoSVGPaint(const ProtoSVGPaint& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ref_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ref_id()) {
    ref_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_id_);
  }
  if (from.has_color()) {
    color_ = new ::ProtoColor(*from.color_);
  } else {
    color_ = NULL;
  }
  ::memcpy(&paint_off_, &from.paint_off_,
    static_cast<size_t>(reinterpret_cast<char*>(&stroke_width_) -
    reinterpret_cast<char*>(&paint_off_)) + sizeof(stroke_width_));
  // @@protoc_insertion_point(copy_constructor:ProtoSVGPaint)
}

void ProtoSVGPaint::SharedCtor() {
  _cached_size_ = 0;
  ref_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odd_) -
      reinterpret_cast<char*>(&color_)) + sizeof(odd_));
  stroke_width_ = 1;
}

ProtoSVGPaint::~ProtoSVGPaint() {
  // @@protoc_insertion_point(destructor:ProtoSVGPaint)
  SharedDtor();
}

void ProtoSVGPaint::SharedDtor() {
  ref_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete color_;
}

void ProtoSVGPaint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoSVGPaint& ProtoSVGPaint::default_instance() {
  ::protobuf_svg_2eproto::InitDefaultsProtoSVGPaint();
  return *internal_default_instance();
}

ProtoSVGPaint* ProtoSVGPaint::New(::google::protobuf::Arena* arena) const {
  ProtoSVGPaint* n = new ProtoSVGPaint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoSVGPaint::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoSVGPaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!ref_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ref_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(color_ != NULL);
      color_->Clear();
    }
  }
  ::memset(&paint_off_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odd_) -
      reinterpret_cast<char*>(&paint_off_)) + sizeof(odd_));
  stroke_width_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoSVGPaint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ProtoSVGPaint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoColor color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ref_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool paint_off = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_paint_off();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paint_off_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool odd = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_odd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &odd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float stroke_width = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_stroke_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stroke_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoSVGPaint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoSVGPaint)
  return false;
#undef DO_
}

void ProtoSVGPaint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoSVGPaint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ProtoColor color = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->color_, output);
  }

  // optional string ref_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ref_id(), output);
  }

  // optional bool paint_off = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->paint_off(), output);
  }

  // optional bool odd = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->odd(), output);
  }

  // optional float stroke_width = 5 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->stroke_width(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ProtoSVGPaint)
}

size_t ProtoSVGPaint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoSVGPaint)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional string ref_id = 2;
    if (has_ref_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref_id());
    }

    // optional .ProtoColor color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->color_);
    }

    // optional bool paint_off = 3;
    if (has_paint_off()) {
      total_size += 1 + 1;
    }

    // optional bool odd = 4 [default = false];
    if (has_odd()) {
      total_size += 1 + 1;
    }

    // optional float stroke_width = 5 [default = 1];
    if (has_stroke_width()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSVGPaint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoSVGPaint*>(&from));
}

void ProtoSVGPaint::MergeFrom(const ProtoSVGPaint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoSVGPaint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ref_id();
      ref_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_color()->::ProtoColor::MergeFrom(from.color());
    }
    if (cached_has_bits & 0x00000004u) {
      paint_off_ = from.paint_off_;
    }
    if (cached_has_bits & 0x00000008u) {
      odd_ = from.odd_;
    }
    if (cached_has_bits & 0x00000010u) {
      stroke_width_ = from.stroke_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoSVGPaint::CopyFrom(const ProtoSVGPaint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoSVGPaint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSVGPaint::IsInitialized() const {
  return true;
}

void ProtoSVGPaint::Swap(ProtoSVGPaint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoSVGPaint::InternalSwap(ProtoSVGPaint* other) {
  using std::swap;
  ref_id_.Swap(&other->ref_id_);
  swap(color_, other->color_);
  swap(paint_off_, other->paint_off_);
  swap(odd_, other->odd_);
  swap(stroke_width_, other->stroke_width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ProtoSVGPaint::GetTypeName() const {
  return "ProtoSVGPaint";
}


// ===================================================================

void ProtoSVGGeneralParams::InitAsDefaultInstance() {
  ::_ProtoSVGGeneralParams_default_instance_._instance.get_mutable()->fill_ = const_cast< ::ProtoSVGPaint*>(
      ::ProtoSVGPaint::internal_default_instance());
  ::_ProtoSVGGeneralParams_default_instance_._instance.get_mutable()->stroke_ = const_cast< ::ProtoSVGPaint*>(
      ::ProtoSVGPaint::internal_default_instance());
  ::_ProtoSVGGeneralParams_default_instance_._instance.get_mutable()->transform_ = const_cast< ::ProtoAffineTransformMatrix*>(
      ::ProtoAffineTransformMatrix::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoSVGGeneralParams::kChildsFieldNumber;
const int ProtoSVGGeneralParams::kIdFieldNumber;
const int ProtoSVGGeneralParams::kFillFieldNumber;
const int ProtoSVGGeneralParams::kStrokeFieldNumber;
const int ProtoSVGGeneralParams::kTransformFieldNumber;
const int ProtoSVGGeneralParams::kOpacityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoSVGGeneralParams::ProtoSVGGeneralParams()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_svg_2eproto::InitDefaultsProtoSVGElement();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoSVGGeneralParams)
}
ProtoSVGGeneralParams::ProtoSVGGeneralParams(const ProtoSVGGeneralParams& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      childs_(from.childs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_fill()) {
    fill_ = new ::ProtoSVGPaint(*from.fill_);
  } else {
    fill_ = NULL;
  }
  if (from.has_stroke()) {
    stroke_ = new ::ProtoSVGPaint(*from.stroke_);
  } else {
    stroke_ = NULL;
  }
  if (from.has_transform()) {
    transform_ = new ::ProtoAffineTransformMatrix(*from.transform_);
  } else {
    transform_ = NULL;
  }
  opacity_ = from.opacity_;
  // @@protoc_insertion_point(copy_constructor:ProtoSVGGeneralParams)
}

void ProtoSVGGeneralParams::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fill_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transform_) -
      reinterpret_cast<char*>(&fill_)) + sizeof(transform_));
  opacity_ = 1;
}

ProtoSVGGeneralParams::~ProtoSVGGeneralParams() {
  // @@protoc_insertion_point(destructor:ProtoSVGGeneralParams)
  SharedDtor();
}

void ProtoSVGGeneralParams::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fill_;
  if (this != internal_default_instance()) delete stroke_;
  if (this != internal_default_instance()) delete transform_;
}

void ProtoSVGGeneralParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoSVGGeneralParams& ProtoSVGGeneralParams::default_instance() {
  ::protobuf_svg_2eproto::InitDefaultsProtoSVGElement();
  return *internal_default_instance();
}

ProtoSVGGeneralParams* ProtoSVGGeneralParams::New(::google::protobuf::Arena* arena) const {
  ProtoSVGGeneralParams* n = new ProtoSVGGeneralParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoSVGGeneralParams::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoSVGGeneralParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  childs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fill_ != NULL);
      fill_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stroke_ != NULL);
      stroke_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(transform_ != NULL);
      transform_->Clear();
    }
    opacity_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoSVGGeneralParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ProtoSVGGeneralParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoSVGElement childs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_childs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoSVGPaint fill = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fill()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoSVGPaint stroke = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stroke()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoAffineTransformMatrix transform = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float opacity = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_opacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &opacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoSVGGeneralParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoSVGGeneralParams)
  return false;
#undef DO_
}

void ProtoSVGGeneralParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoSVGGeneralParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProtoSVGElement childs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->childs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->childs(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional .ProtoSVGPaint fill = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->fill_, output);
  }

  // optional .ProtoSVGPaint stroke = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->stroke_, output);
  }

  // optional .ProtoAffineTransformMatrix transform = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->transform_, output);
  }

  // optional float opacity = 6 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->opacity(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ProtoSVGGeneralParams)
}

size_t ProtoSVGGeneralParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoSVGGeneralParams)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .ProtoSVGElement childs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->childs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->childs(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .ProtoSVGPaint fill = 3;
    if (has_fill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->fill_);
    }

    // optional .ProtoSVGPaint stroke = 4;
    if (has_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->stroke_);
    }

    // optional .ProtoAffineTransformMatrix transform = 5;
    if (has_transform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->transform_);
    }

    // optional float opacity = 6 [default = 1];
    if (has_opacity()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSVGGeneralParams::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoSVGGeneralParams*>(&from));
}

void ProtoSVGGeneralParams::MergeFrom(const ProtoSVGGeneralParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoSVGGeneralParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  childs_.MergeFrom(from.childs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_fill()->::ProtoSVGPaint::MergeFrom(from.fill());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_stroke()->::ProtoSVGPaint::MergeFrom(from.stroke());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_transform()->::ProtoAffineTransformMatrix::MergeFrom(from.transform());
    }
    if (cached_has_bits & 0x00000010u) {
      opacity_ = from.opacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoSVGGeneralParams::CopyFrom(const ProtoSVGGeneralParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoSVGGeneralParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSVGGeneralParams::IsInitialized() const {
  return true;
}

void ProtoSVGGeneralParams::Swap(ProtoSVGGeneralParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoSVGGeneralParams::InternalSwap(ProtoSVGGeneralParams* other) {
  using std::swap;
  childs_.InternalSwap(&other->childs_);
  id_.Swap(&other->id_);
  swap(fill_, other->fill_);
  swap(stroke_, other->stroke_);
  swap(transform_, other->transform_);
  swap(opacity_, other->opacity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ProtoSVGGeneralParams::GetTypeName() const {
  return "ProtoSVGGeneralParams";
}


// ===================================================================

void ProtoSVGElementGradient_GradientStop::InitAsDefaultInstance() {
  ::_ProtoSVGElementGradient_GradientStop_default_instance_._instance.get_mutable()->color_ = const_cast< ::ProtoColor*>(
      ::ProtoColor::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoSVGElementGradient_GradientStop::kOffsetFieldNumber;
const int ProtoSVGElementGradient_GradientStop::kColorFieldNumber;
const int ProtoSVGElementGradient_GradientStop::kAlphaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoSVGElementGradient_GradientStop::ProtoSVGElementGradient_GradientStop()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_svg_2eproto::InitDefaultsProtoSVGElementGradient_GradientStop();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoSVGElementGradient.GradientStop)
}
ProtoSVGElementGradient_GradientStop::ProtoSVGElementGradient_GradientStop(const ProtoSVGElementGradient_GradientStop& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_color()) {
    color_ = new ::ProtoColor(*from.color_);
  } else {
    color_ = NULL;
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&alpha_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(alpha_));
  // @@protoc_insertion_point(copy_constructor:ProtoSVGElementGradient.GradientStop)
}

void ProtoSVGElementGradient_GradientStop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_) -
      reinterpret_cast<char*>(&color_)) + sizeof(alpha_));
}

ProtoSVGElementGradient_GradientStop::~ProtoSVGElementGradient_GradientStop() {
  // @@protoc_insertion_point(destructor:ProtoSVGElementGradient.GradientStop)
  SharedDtor();
}

void ProtoSVGElementGradient_GradientStop::SharedDtor() {
  if (this != internal_default_instance()) delete color_;
}

void ProtoSVGElementGradient_GradientStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoSVGElementGradient_GradientStop& ProtoSVGElementGradient_GradientStop::default_instance() {
  ::protobuf_svg_2eproto::InitDefaultsProtoSVGElementGradient_GradientStop();
  return *internal_default_instance();
}

ProtoSVGElementGradient_GradientStop* ProtoSVGElementGradient_GradientStop::New(::google::protobuf::Arena* arena) const {
  ProtoSVGElementGradient_GradientStop* n = new ProtoSVGElementGradient_GradientStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoSVGElementGradient_GradientStop::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoSVGElementGradient.GradientStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(color_ != NULL);
    color_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&alpha_) -
        reinterpret_cast<char*>(&offset_)) + sizeof(alpha_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoSVGElementGradient_GradientStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ProtoSVGElementGradient.GradientStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoColor color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float alpha = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoSVGElementGradient.GradientStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoSVGElementGradient.GradientStop)
  return false;
#undef DO_
}

void ProtoSVGElementGradient_GradientStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoSVGElementGradient.GradientStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float offset = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->offset(), output);
  }

  // optional .ProtoColor color = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->color_, output);
  }

  // optional float alpha = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->alpha(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ProtoSVGElementGradient.GradientStop)
}

size_t ProtoSVGElementGradient_GradientStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoSVGElementGradient.GradientStop)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional .ProtoColor color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->color_);
    }

    // optional float offset = 1;
    if (has_offset()) {
      total_size += 1 + 4;
    }

    // optional float alpha = 3;
    if (has_alpha()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSVGElementGradient_GradientStop::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoSVGElementGradient_GradientStop*>(&from));
}

void ProtoSVGElementGradient_GradientStop::MergeFrom(const ProtoSVGElementGradient_GradientStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoSVGElementGradient.GradientStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_color()->::ProtoColor::MergeFrom(from.color());
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      alpha_ = from.alpha_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoSVGElementGradient_GradientStop::CopyFrom(const ProtoSVGElementGradient_GradientStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoSVGElementGradient.GradientStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSVGElementGradient_GradientStop::IsInitialized() const {
  return true;
}

void ProtoSVGElementGradient_GradientStop::Swap(ProtoSVGElementGradient_GradientStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoSVGElementGradient_GradientStop::InternalSwap(ProtoSVGElementGradient_GradientStop* other) {
  using std::swap;
  swap(color_, other->color_);
  swap(offset_, other->offset_);
  swap(alpha_, other->alpha_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ProtoSVGElementGradient_GradientStop::GetTypeName() const {
  return "ProtoSVGElementGradient.GradientStop";
}


// ===================================================================

void ProtoSVGElementGradient::InitAsDefaultInstance() {
  ::_ProtoSVGElementGradient_default_instance_._instance.get_mutable()->params_ = const_cast< ::ProtoSVGGeneralParams*>(
      ::ProtoSVGGeneralParams::internal_default_instance());
  ::_ProtoSVGElementGradient_default_instance_._instance.get_mutable()->gradienttransform_ = const_cast< ::ProtoAffineTransformMatrix*>(
      ::ProtoAffineTransformMatrix::internal_default_instance());
  ::_ProtoSVGElementGradient_default_instance_._instance.get_mutable()->startpoint_ = const_cast< ::ProtoPoint*>(
      ::ProtoPoint::internal_default_instance());
  ::_ProtoSVGElementGradient_default_instance_._instance.get_mutable()->endpoint_ = const_cast< ::ProtoPoint*>(
      ::ProtoPoint::internal_default_instance());
  ::_ProtoSVGElementGradient_default_instance_._instance.get_mutable()->center_ = const_cast< ::ProtoPoint*>(
      ::ProtoPoint::internal_default_instance());
  ::_ProtoSVGElementGradient_default_instance_._instance.get_mutable()->focuspoint_ = const_cast< ::ProtoPoint*>(
      ::ProtoPoint::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoSVGElementGradient::kParamsFieldNumber;
const int ProtoSVGElementGradient::kStopsFieldNumber;
const int ProtoSVGElementGradient::kGradientTransformFieldNumber;
const int ProtoSVGElementGradient::kStartPointFieldNumber;
const int ProtoSVGElementGradient::kEndPointFieldNumber;
const int ProtoSVGElementGradient::kCenterFieldNumber;
const int ProtoSVGElementGradient::kRFieldNumber;
const int ProtoSVGElementGradient::kFocusPointFieldNumber;
const int ProtoSVGElementGradient::kGradientUnitsIsUserSpaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoSVGElementGradient::ProtoSVGElementGradient()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_svg_2eproto::InitDefaultsProtoSVGElement();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoSVGElementGradient)
}
ProtoSVGElementGradient::ProtoSVGElementGradient(const ProtoSVGElementGradient& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stops_(from.stops_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_params()) {
    params_ = new ::ProtoSVGGeneralParams(*from.params_);
  } else {
    params_ = NULL;
  }
  if (from.has_gradienttransform()) {
    gradienttransform_ = new ::ProtoAffineTransformMatrix(*from.gradienttransform_);
  } else {
    gradienttransform_ = NULL;
  }
  if (from.has_startpoint()) {
    startpoint_ = new ::ProtoPoint(*from.startpoint_);
  } else {
    startpoint_ = NULL;
  }
  if (from.has_endpoint()) {
    endpoint_ = new ::ProtoPoint(*from.endpoint_);
  } else {
    endpoint_ = NULL;
  }
  if (from.has_center()) {
    center_ = new ::ProtoPoint(*from.center_);
  } else {
    center_ = NULL;
  }
  if (from.has_focuspoint()) {
    focuspoint_ = new ::ProtoPoint(*from.focuspoint_);
  } else {
    focuspoint_ = NULL;
  }
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&gradientunits_isuserspace_) -
    reinterpret_cast<char*>(&r_)) + sizeof(gradientunits_isuserspace_));
  // @@protoc_insertion_point(copy_constructor:ProtoSVGElementGradient)
}

void ProtoSVGElementGradient::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&params_)) + sizeof(r_));
  gradientunits_isuserspace_ = true;
}

ProtoSVGElementGradient::~ProtoSVGElementGradient() {
  // @@protoc_insertion_point(destructor:ProtoSVGElementGradient)
  SharedDtor();
}

void ProtoSVGElementGradient::SharedDtor() {
  if (this != internal_default_instance()) delete params_;
  if (this != internal_default_instance()) delete gradienttransform_;
  if (this != internal_default_instance()) delete startpoint_;
  if (this != internal_default_instance()) delete endpoint_;
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete focuspoint_;
}

void ProtoSVGElementGradient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoSVGElementGradient& ProtoSVGElementGradient::default_instance() {
  ::protobuf_svg_2eproto::InitDefaultsProtoSVGElement();
  return *internal_default_instance();
}

ProtoSVGElementGradient* ProtoSVGElementGradient::New(::google::protobuf::Arena* arena) const {
  ProtoSVGElementGradient* n = new ProtoSVGElementGradient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoSVGElementGradient::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoSVGElementGradient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(params_ != NULL);
      params_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gradienttransform_ != NULL);
      gradienttransform_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(startpoint_ != NULL);
      startpoint_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(endpoint_ != NULL);
      endpoint_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(center_ != NULL);
      center_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(focuspoint_ != NULL);
      focuspoint_->Clear();
    }
  }
  if (cached_has_bits & 192u) {
    r_ = 0;
    gradientunits_isuserspace_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoSVGElementGradient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ProtoSVGElementGradient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoSVGGeneralParams params = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ProtoSVGElementGradient.GradientStop stops = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_stops()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoAffineTransformMatrix gradientTransform = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gradienttransform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoPoint startPoint = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_startpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoPoint endPoint = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_endpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoPoint center = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float r = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoPoint focusPoint = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_focuspoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool gradientUnits_IsUserSpace = 10 [default = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_gradientunits_isuserspace();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gradientunits_isuserspace_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoSVGElementGradient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoSVGElementGradient)
  return false;
#undef DO_
}

void ProtoSVGElementGradient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoSVGElementGradient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ProtoSVGGeneralParams params = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->params_, output);
  }

  // repeated .ProtoSVGElementGradient.GradientStop stops = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stops_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->stops(static_cast<int>(i)), output);
  }

  // optional .ProtoAffineTransformMatrix gradientTransform = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->gradienttransform_, output);
  }

  // optional .ProtoPoint startPoint = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->startpoint_, output);
  }

  // optional .ProtoPoint endPoint = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->endpoint_, output);
  }

  // optional .ProtoPoint center = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->center_, output);
  }

  // optional float r = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->r(), output);
  }

  // optional .ProtoPoint focusPoint = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->focuspoint_, output);
  }

  // optional bool gradientUnits_IsUserSpace = 10 [default = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->gradientunits_isuserspace(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ProtoSVGElementGradient)
}

size_t ProtoSVGElementGradient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoSVGElementGradient)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .ProtoSVGElementGradient.GradientStop stops = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->stops_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stops(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .ProtoSVGGeneralParams params = 1;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->params_);
    }

    // optional .ProtoAffineTransformMatrix gradientTransform = 4;
    if (has_gradienttransform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->gradienttransform_);
    }

    // optional .ProtoPoint startPoint = 5;
    if (has_startpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->startpoint_);
    }

    // optional .ProtoPoint endPoint = 6;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->endpoint_);
    }

    // optional .ProtoPoint center = 7;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->center_);
    }

    // optional .ProtoPoint focusPoint = 9;
    if (has_focuspoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->focuspoint_);
    }

    // optional float r = 8;
    if (has_r()) {
      total_size += 1 + 4;
    }

    // optional bool gradientUnits_IsUserSpace = 10 [default = true];
    if (has_gradientunits_isuserspace()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSVGElementGradient::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoSVGElementGradient*>(&from));
}

void ProtoSVGElementGradient::MergeFrom(const ProtoSVGElementGradient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoSVGElementGradient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stops_.MergeFrom(from.stops_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_params()->::ProtoSVGGeneralParams::MergeFrom(from.params());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_gradienttransform()->::ProtoAffineTransformMatrix::MergeFrom(from.gradienttransform());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_startpoint()->::ProtoPoint::MergeFrom(from.startpoint());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_endpoint()->::ProtoPoint::MergeFrom(from.endpoint());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_center()->::ProtoPoint::MergeFrom(from.center());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_focuspoint()->::ProtoPoint::MergeFrom(from.focuspoint());
    }
    if (cached_has_bits & 0x00000040u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000080u) {
      gradientunits_isuserspace_ = from.gradientunits_isuserspace_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoSVGElementGradient::CopyFrom(const ProtoSVGElementGradient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoSVGElementGradient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSVGElementGradient::IsInitialized() const {
  return true;
}

void ProtoSVGElementGradient::Swap(ProtoSVGElementGradient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoSVGElementGradient::InternalSwap(ProtoSVGElementGradient* other) {
  using std::swap;
  stops_.InternalSwap(&other->stops_);
  swap(params_, other->params_);
  swap(gradienttransform_, other->gradienttransform_);
  swap(startpoint_, other->startpoint_);
  swap(endpoint_, other->endpoint_);
  swap(center_, other->center_);
  swap(focuspoint_, other->focuspoint_);
  swap(r_, other->r_);
  swap(gradientunits_isuserspace_, other->gradientunits_isuserspace_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ProtoSVGElementGradient::GetTypeName() const {
  return "ProtoSVGElementGradient";
}


// ===================================================================

void ProtoSVGElementPath_PathPoint::InitAsDefaultInstance() {
  ::_ProtoSVGElementPath_PathPoint_default_instance_._instance.get_mutable()->move_to_ = const_cast< ::ProtoPoint*>(
      ::ProtoPoint::internal_default_instance());
  ::_ProtoSVGElementPath_PathPoint_default_instance_._instance.get_mutable()->line_to_ = const_cast< ::ProtoPoint*>(
      ::ProtoPoint::internal_default_instance());
  ::_ProtoSVGElementPath_PathPoint_default_instance_._instance.get_mutable()->curve_to_ = const_cast< ::ProtoCurve*>(
      ::ProtoCurve::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoSVGElementPath_PathPoint::kMoveToFieldNumber;
const int ProtoSVGElementPath_PathPoint::kLineToFieldNumber;
const int ProtoSVGElementPath_PathPoint::kCurveToFieldNumber;
const int ProtoSVGElementPath_PathPoint::kClosePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoSVGElementPath_PathPoint::ProtoSVGElementPath_PathPoint()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_svg_2eproto::InitDefaultsProtoSVGElementPath_PathPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoSVGElementPath.PathPoint)
}
ProtoSVGElementPath_PathPoint::ProtoSVGElementPath_PathPoint(const ProtoSVGElementPath_PathPoint& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_move_to()) {
    move_to_ = new ::ProtoPoint(*from.move_to_);
  } else {
    move_to_ = NULL;
  }
  if (from.has_line_to()) {
    line_to_ = new ::ProtoPoint(*from.line_to_);
  } else {
    line_to_ = NULL;
  }
  if (from.has_curve_to()) {
    curve_to_ = new ::ProtoCurve(*from.curve_to_);
  } else {
    curve_to_ = NULL;
  }
  close_path_ = from.close_path_;
  // @@protoc_insertion_point(copy_constructor:ProtoSVGElementPath.PathPoint)
}

void ProtoSVGElementPath_PathPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&move_to_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_path_) -
      reinterpret_cast<char*>(&move_to_)) + sizeof(close_path_));
}

ProtoSVGElementPath_PathPoint::~ProtoSVGElementPath_PathPoint() {
  // @@protoc_insertion_point(destructor:ProtoSVGElementPath.PathPoint)
  SharedDtor();
}

void ProtoSVGElementPath_PathPoint::SharedDtor() {
  if (this != internal_default_instance()) delete move_to_;
  if (this != internal_default_instance()) delete line_to_;
  if (this != internal_default_instance()) delete curve_to_;
}

void ProtoSVGElementPath_PathPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoSVGElementPath_PathPoint& ProtoSVGElementPath_PathPoint::default_instance() {
  ::protobuf_svg_2eproto::InitDefaultsProtoSVGElementPath_PathPoint();
  return *internal_default_instance();
}

ProtoSVGElementPath_PathPoint* ProtoSVGElementPath_PathPoint::New(::google::protobuf::Arena* arena) const {
  ProtoSVGElementPath_PathPoint* n = new ProtoSVGElementPath_PathPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoSVGElementPath_PathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoSVGElementPath.PathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(move_to_ != NULL);
      move_to_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(line_to_ != NULL);
      line_to_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(curve_to_ != NULL);
      curve_to_->Clear();
    }
  }
  close_path_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoSVGElementPath_PathPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ProtoSVGElementPath.PathPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoPoint move_to = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_move_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoPoint line_to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_line_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoCurve curve_to = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_curve_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool close_path = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_close_path();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &close_path_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoSVGElementPath.PathPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoSVGElementPath.PathPoint)
  return false;
#undef DO_
}

void ProtoSVGElementPath_PathPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoSVGElementPath.PathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ProtoPoint move_to = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->move_to_, output);
  }

  // optional .ProtoPoint line_to = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->line_to_, output);
  }

  // optional .ProtoCurve curve_to = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->curve_to_, output);
  }

  // optional bool close_path = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->close_path(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ProtoSVGElementPath.PathPoint)
}

size_t ProtoSVGElementPath_PathPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoSVGElementPath.PathPoint)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional .ProtoPoint move_to = 1;
    if (has_move_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->move_to_);
    }

    // optional .ProtoPoint line_to = 2;
    if (has_line_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->line_to_);
    }

    // optional .ProtoCurve curve_to = 3;
    if (has_curve_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->curve_to_);
    }

    // optional bool close_path = 4 [default = false];
    if (has_close_path()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSVGElementPath_PathPoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoSVGElementPath_PathPoint*>(&from));
}

void ProtoSVGElementPath_PathPoint::MergeFrom(const ProtoSVGElementPath_PathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoSVGElementPath.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_move_to()->::ProtoPoint::MergeFrom(from.move_to());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_line_to()->::ProtoPoint::MergeFrom(from.line_to());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_curve_to()->::ProtoCurve::MergeFrom(from.curve_to());
    }
    if (cached_has_bits & 0x00000008u) {
      close_path_ = from.close_path_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoSVGElementPath_PathPoint::CopyFrom(const ProtoSVGElementPath_PathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoSVGElementPath.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSVGElementPath_PathPoint::IsInitialized() const {
  return true;
}

void ProtoSVGElementPath_PathPoint::Swap(ProtoSVGElementPath_PathPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoSVGElementPath_PathPoint::InternalSwap(ProtoSVGElementPath_PathPoint* other) {
  using std::swap;
  swap(move_to_, other->move_to_);
  swap(line_to_, other->line_to_);
  swap(curve_to_, other->curve_to_);
  swap(close_path_, other->close_path_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ProtoSVGElementPath_PathPoint::GetTypeName() const {
  return "ProtoSVGElementPath.PathPoint";
}


// ===================================================================

void ProtoSVGElementPath::InitAsDefaultInstance() {
  ::_ProtoSVGElementPath_default_instance_._instance.get_mutable()->params_ = const_cast< ::ProtoSVGGeneralParams*>(
      ::ProtoSVGGeneralParams::internal_default_instance());
  ::_ProtoSVGElementPath_default_instance_._instance.get_mutable()->rect_ = const_cast< ::ProtoRect*>(
      ::ProtoRect::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoSVGElementPath::kParamsFieldNumber;
const int ProtoSVGElementPath::kPointsFieldNumber;
const int ProtoSVGElementPath::kCxFieldNumber;
const int ProtoSVGElementPath::kCyFieldNumber;
const int ProtoSVGElementPath::kRxFieldNumber;
const int ProtoSVGElementPath::kRyFieldNumber;
const int ProtoSVGElementPath::kRFieldNumber;
const int ProtoSVGElementPath::kRectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoSVGElementPath::ProtoSVGElementPath()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_svg_2eproto::InitDefaultsProtoSVGElement();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoSVGElementPath)
}
ProtoSVGElementPath::ProtoSVGElementPath(const ProtoSVGElementPath& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_params()) {
    params_ = new ::ProtoSVGGeneralParams(*from.params_);
  } else {
    params_ = NULL;
  }
  if (from.has_rect()) {
    rect_ = new ::ProtoRect(*from.rect_);
  } else {
    rect_ = NULL;
  }
  ::memcpy(&cx_, &from.cx_,
    static_cast<size_t>(reinterpret_cast<char*>(&r_) -
    reinterpret_cast<char*>(&cx_)) + sizeof(r_));
  // @@protoc_insertion_point(copy_constructor:ProtoSVGElementPath)
}

void ProtoSVGElementPath::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&params_)) + sizeof(r_));
}

ProtoSVGElementPath::~ProtoSVGElementPath() {
  // @@protoc_insertion_point(destructor:ProtoSVGElementPath)
  SharedDtor();
}

void ProtoSVGElementPath::SharedDtor() {
  if (this != internal_default_instance()) delete params_;
  if (this != internal_default_instance()) delete rect_;
}

void ProtoSVGElementPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoSVGElementPath& ProtoSVGElementPath::default_instance() {
  ::protobuf_svg_2eproto::InitDefaultsProtoSVGElement();
  return *internal_default_instance();
}

ProtoSVGElementPath* ProtoSVGElementPath::New(::google::protobuf::Arena* arena) const {
  ProtoSVGElementPath* n = new ProtoSVGElementPath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoSVGElementPath::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoSVGElementPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(params_ != NULL);
      params_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rect_ != NULL);
      rect_->Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&cx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&r_) -
        reinterpret_cast<char*>(&cx_)) + sizeof(r_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoSVGElementPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ProtoSVGElementPath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoSVGGeneralParams params = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ProtoSVGElementPath.PathPoint points = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cx = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_cx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_cy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rx = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_rx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ry = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_ry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float r = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoRect rect = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoSVGElementPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoSVGElementPath)
  return false;
#undef DO_
}

void ProtoSVGElementPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoSVGElementPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ProtoSVGGeneralParams params = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->params_, output);
  }

  // repeated .ProtoSVGElementPath.PathPoint points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->points(static_cast<int>(i)), output);
  }

  // optional float cx = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cx(), output);
  }

  // optional float cy = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cy(), output);
  }

  // optional float rx = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->rx(), output);
  }

  // optional float ry = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->ry(), output);
  }

  // optional float r = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->r(), output);
  }

  // optional .ProtoRect rect = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->rect_, output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ProtoSVGElementPath)
}

size_t ProtoSVGElementPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoSVGElementPath)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .ProtoSVGElementPath.PathPoint points = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional .ProtoSVGGeneralParams params = 1;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->params_);
    }

    // optional .ProtoRect rect = 9;
    if (has_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->rect_);
    }

    // optional float cx = 4;
    if (has_cx()) {
      total_size += 1 + 4;
    }

    // optional float cy = 5;
    if (has_cy()) {
      total_size += 1 + 4;
    }

    // optional float rx = 6;
    if (has_rx()) {
      total_size += 1 + 4;
    }

    // optional float ry = 7;
    if (has_ry()) {
      total_size += 1 + 4;
    }

    // optional float r = 8;
    if (has_r()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSVGElementPath::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoSVGElementPath*>(&from));
}

void ProtoSVGElementPath::MergeFrom(const ProtoSVGElementPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoSVGElementPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_params()->::ProtoSVGGeneralParams::MergeFrom(from.params());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rect()->::ProtoRect::MergeFrom(from.rect());
    }
    if (cached_has_bits & 0x00000004u) {
      cx_ = from.cx_;
    }
    if (cached_has_bits & 0x00000008u) {
      cy_ = from.cy_;
    }
    if (cached_has_bits & 0x00000010u) {
      rx_ = from.rx_;
    }
    if (cached_has_bits & 0x00000020u) {
      ry_ = from.ry_;
    }
    if (cached_has_bits & 0x00000040u) {
      r_ = from.r_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtoSVGElementPath::CopyFrom(const ProtoSVGElementPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoSVGElementPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSVGElementPath::IsInitialized() const {
  return true;
}

void ProtoSVGElementPath::Swap(ProtoSVGElementPath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoSVGElementPath::InternalSwap(ProtoSVGElementPath* other) {
  using std::swap;
  points_.InternalSwap(&other->points_);
  swap(params_, other->params_);
  swap(rect_, other->rect_);
  swap(cx_, other->cx_);
  swap(cy_, other->cy_);
  swap(rx_, other->rx_);
  swap(ry_, other->ry_);
  swap(r_, other->r_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ProtoSVGElementPath::GetTypeName() const {
  return "ProtoSVGElementPath";
}


// ===================================================================

void ProtoSVGRoot::InitAsDefaultInstance() {
  ::_ProtoSVGRoot_default_instance_._instance.get_mutable()->params_ = const_cast< ::ProtoSVGGeneralParams*>(
      ::ProtoSVGGeneralParams::internal_default_instance());
  ::_ProtoSVGRoot_default_instance_._instance.get_mutable()->frame_ = const_cast< ::ProtoRect*>(
      ::ProtoRect::internal_default_instance());
  ::_ProtoSVGRoot_default_instance_._instance.get_mutable()->bounds_ = const_cast< ::ProtoRect*>(
      ::ProtoRect::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoSVGRoot::kParamsFieldNumber;
const int ProtoSVGRoot::kFrameFieldNumber;
const int ProtoSVGRoot::kBoundsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoSVGRoot::ProtoSVGRoot()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_svg_2eproto::InitDefaultsProtoSVGRoot();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoSVGRoot)
}
ProtoSVGRoot::ProtoSVGRoot(const ProtoSVGRoot& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_params()) {
    params_ = new ::ProtoSVGGeneralParams(*from.params_);
  } else {
    params_ = NULL;
  }
  if (from.has_frame()) {
    frame_ = new ::ProtoRect(*from.frame_);
  } else {
    frame_ = NULL;
  }
  if (from.has_bounds()) {
    bounds_ = new ::ProtoRect(*from.bounds_);
  } else {
    bounds_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ProtoSVGRoot)
}

void ProtoSVGRoot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bounds_) -
      reinterpret_cast<char*>(&params_)) + sizeof(bounds_));
}

ProtoSVGRoot::~ProtoSVGRoot() {
  // @@protoc_insertion_point(destructor:ProtoSVGRoot)
  SharedDtor();
}

void ProtoSVGRoot::SharedDtor() {
  if (this != internal_default_instance()) delete params_;
  if (this != internal_default_instance()) delete frame_;
  if (this != internal_default_instance()) delete bounds_;
}

void ProtoSVGRoot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoSVGRoot& ProtoSVGRoot::default_instance() {
  ::protobuf_svg_2eproto::InitDefaultsProtoSVGRoot();
  return *internal_default_instance();
}

ProtoSVGRoot* ProtoSVGRoot::New(::google::protobuf::Arena* arena) const {
  ProtoSVGRoot* n = new ProtoSVGRoot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoSVGRoot::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoSVGRoot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(params_ != NULL);
      params_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(frame_ != NULL);
      frame_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bounds_ != NULL);
      bounds_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProtoSVGRoot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ProtoSVGRoot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoSVGGeneralParams params = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoRect frame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ProtoRect bounds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoSVGRoot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoSVGRoot)
  return false;
#undef DO_
}

void ProtoSVGRoot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoSVGRoot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ProtoSVGGeneralParams params = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->params_, output);
  }

  // optional .ProtoRect frame = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->frame_, output);
  }

  // optional .ProtoRect bounds = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->bounds_, output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ProtoSVGRoot)
}

size_t ProtoSVGRoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoSVGRoot)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional .ProtoSVGGeneralParams params = 1;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->params_);
    }

    // optional .ProtoRect frame = 2;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->frame_);
    }

    // optional .ProtoRect bounds = 3;
    if (has_bounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->bounds_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoSVGRoot::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoSVGRoot*>(&from));
}

void ProtoSVGRoot::MergeFrom(const ProtoSVGRoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoSVGRoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_params()->::ProtoSVGGeneralParams::MergeFrom(from.params());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_frame()->::ProtoRect::MergeFrom(from.frame());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_bounds()->::ProtoRect::MergeFrom(from.bounds());
    }
  }
}

void ProtoSVGRoot::CopyFrom(const ProtoSVGRoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoSVGRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoSVGRoot::IsInitialized() const {
  return true;
}

void ProtoSVGRoot::Swap(ProtoSVGRoot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoSVGRoot::InternalSwap(ProtoSVGRoot* other) {
  using std::swap;
  swap(params_, other->params_);
  swap(frame_, other->frame_);
  swap(bounds_, other->bounds_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ProtoSVGRoot::GetTypeName() const {
  return "ProtoSVGRoot";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
